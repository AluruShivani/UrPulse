package com.example.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.entity.Schedule;
import com.example.service.DatabaseaSequencesGeneratorService;
import com.example.service.ScheduleService;

@RestController
@RequestMapping("api/v1")
public class ScheduleController {

    @Autowired
    private ScheduleService scheduleService;

    @Autowired
    private DatabaseaSequencesGeneratorService databaseaSequencesGeneratorService;

    @PostMapping("addSchedule")
    public ResponseEntity<List<Schedule>> createSchedules(@RequestBody List<Schedule> schedules) {
        schedules.forEach(schedule -> {
            schedule.setScheduleId(databaseaSequencesGeneratorService.generateSequence(Schedule.SEQUENCE_NAME));
            scheduleService.createSchedule(schedule);
        });
        return new ResponseEntity<>(schedules, HttpStatus.CREATED);
    }

    @GetMapping("getScheduleById/{scheduleId}")
    public ResponseEntity<Schedule> getScheduleById(@PathVariable("scheduleId") long scheduleId) {
        Optional<Schedule> schedule = scheduleService.getScheduleById(scheduleId);
        return schedule.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/getAllSchedule")
    public List<Schedule> getAllSchedule() {
        return scheduleService.getAllSchedules();
    }

    @DeleteMapping("deleteSchedule/{scheduleId}")
    public ResponseEntity<Void> deleteSchedule(@PathVariable("scheduleId") long scheduleId) {
        scheduleService.deleteScheduleById(scheduleId);
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/updateSchedule/{scheduleId}")
    public ResponseEntity<Schedule> updateSchedule(@PathVariable("scheduleId") long scheduleId, @RequestBody Schedule schedule) {
        Optional<Schedule> existingSchedule = scheduleService.getScheduleById(scheduleId);
        if (!existingSchedule.isPresent()) {
            return ResponseEntity.notFound().build();
        }
        schedule.setScheduleId(scheduleId); // Ensure the ID from the path variable is set
        Schedule updatedSchedule = scheduleService.updateSchedule(schedule);
        return ResponseEntity.ok(updatedSchedule);
    }

    @GetMapping("/doctor/{doctorId}/schedule")
    public List<Schedule> getScheduleByDoctorId(@PathVariable Long doctorId) {
        return scheduleService.getScheduleByDoctorId(doctorId);
    }
}
